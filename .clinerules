# Nextjs-Mastraプロジェクトのためのルール

## プロジェクト概要
このプロジェクトはNext.jsとMastraフレームワークを使用したAIエージェントアプリケーションで、AWSのECSにデプロイされます。主な機能は「シェフAI」という料理レシピアシスタントです。

## 技術スタック
- フロントエンド: Next.js
- AIフレームワーク: Mastra
- AIモデル: Amazon Bedrock (Claude 3.5 Sonnet)
- インフラ: AWS CDK, ECS, ECR
- コンテナ化: Docker

## コード規約
1. TypeScriptの型定義を適切に使用すること
2. コンポーネントは関数コンポーネントとして実装すること
3. 非同期処理はasync/awaitを使用すること
4. エラーハンドリングを適切に実装すること
5. 環境変数は.envファイルで管理し、.env.exampleに例を記載すること

## AIエージェント開発ガイドライン
1. エージェントの指示（instructions）は明確かつ詳細に記述すること
2. エージェントの責務と制約を明確に定義すること
3. ユーザー体験を向上させるための適切なプロンプトエンジニアリングを行うこと
4. 新しいエージェントを追加する場合は、src/mastra/agents/ディレクトリに実装し、src/mastra/index.tsに登録すること

## インフラストラクチャ
1. インフラの変更はIaCディレクトリ内のCDKコードで管理すること
2. 環境変数やシークレットは適切に管理し、ハードコーディングしないこと
3. デプロイ前にローカルでDockerイメージをビルドしてテストすること

## 開発フロー
1. 機能開発は適切なブランチで行うこと（例: feature/xxx）
2. コードレビューを経てからマージすること
3. デプロイ前にテストを実行すること

## 環境設定
1. 開発環境では.env.developmentファイルを使用すること
2. 本番環境ではAWSの認証情報プロバイダーチェーンを使用すること
3. リージョンはap-northeast-1をデフォルトとすること

## 注意点
1. AWSの認証情報を誤ってコミットしないよう注意すること
2. AIモデルの使用コストに注意すること
3. エージェントの指示が適切でない場合、予期しない応答が返る可能性があることに留意すること

## ユースケース
現在、このプロジェクトには以下のユースケースがあります：
1. メインブランチ: 料理エージェント（シェフAI）- 料理レシピアシスタント
2. topic/iot-agentブランチ: トマト観察エージェント - IoTセンサーを活用したトマト栽培観察用
